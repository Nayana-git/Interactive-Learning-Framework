@{
    ViewData["Title"] = "Privacy Policy";
    ViewData.AddActivePage(ManageNavPages.Quiz);
}
@*<h1>@ViewData["Title"]</h1>

    <p>Use this page to detail your site's privacy policy.</p>*@

<link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css" />
<link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css" />

<div id="app">



    <b-card header="Module 1: Quiz Assessment"
            header-text-variant="white"
            header-tag="header"
            header-bg-variant="dark"
            header-class="text-center"
            no-body>



        <b-tabs v-model="tabIndex" class="generictab" ref="wizard" nav-wrapper-class="collapse-navbar">
            <b-tab v-for="item in questionsVm" :title="`question_${item.id}`">

                <b-card-body>
                    <b-card-text>
                        Q {{qNumber}}. {{item.questionText}}
                    </b-card-text>
                </b-card-body>
                <b-list-group flush>
                    <b-list-group-item v-for="choice in item.choices" variant="primary">
                        <b-form-radio v-model="item.anwser" name="`choice_${choice.id}`">{{choice.choiceText}}</b-form-radio>
                    </b-list-group-item>

                </b-list-group>

                <b-card-body>
                    <b-progress :value="value" :max="max" show-progress animated>

                    </b-progress>
                </b-card-body>


            </b-tab>

        </b-tabs>
        <b-card-footer>
            <div class="w-100">

                <a href="#" class="badge badge-light">
                    <Timer v-on:expire="timeExpire" :starttime="sTime"
                           :endTime="eTime"
                           trans='{
                                             "day":"Day",
                                             "hours":"Hours",
                                             "minutes":"mm",
                                             "seconds":"ss",
                                             "expired":"Event has been expired.",
                                             "running":"Till the end of event.",
                                             "upcoming":"Till start of event.",
                                             "status": {
                                                "expired":"Expired",
                                                "running":"Running",
                                                "upcoming":"Future"
                                               }}'></Timer>
                </a>
                <b-button-group class="float-right">
                    <b-button v-show="tabIndex > 0" @@click="tabPrev">Previous</b-button>
                    <button v-show="value !=100" type="button" @@click="tabNext" class="btn btn-primary btn-sm">Next</button>
                    <button v-show="value ==100" type="button" @@click="submitAnswer" class="btn btn-success btn-sm">Submit</button>
                </b-button-group>

            </div>
        </b-card-footer>

    </b-card>

    <b-modal ref="modal-time-out" hide-footer centered cancel-disabled no-close-on-backdrop no-close-on-esc hide-header-close title="Time Out" header-class="text-center">
        <div class="d-block text-center">
            <i class="text-danger display-2 fa fa-clock-o" aria-hidden="true"></i>
            <h3>Your submission time has been expired!</h3>

            <div class="d-flex justify-content-center mb-3">
                <b-spinner variant="info" label="Loading..."></b-spinner>

            </div>
            <p>Your answer will be submiteed automatically...</p>
        </div>

    </b-modal>

    <b-modal ref="submit-modal" hide-footer centered cancel-disabled no-close-on-backdrop no-close-on-esc hide-header-close title="Answer Submit" header-class="text-center">


        <div class="d-block text-center">
            <i class="text-success display-2 fa fa-check-circle" aria-hidden="true"></i>
            <h3>Your Answer has been submited!</h3>
        </div>
        <b-button class="mt-3" variant="outline-danger" block @@click="hideConfirmModal">Close Me</b-button>
    </b-modal>

</div>
<template id="countdown-template">
    <p>{{days}}:{{hours}}:{{minutes}}:{{seconds}}</p>
    <br>
    <p>{{date}}</p>
</template>

@section Scripts {
    <!-- Load polyfills to support older browsers -->
    <script src="//polyfill.io/v3/polyfill.min.js?features=es2015%2CMutationObserver" crossorigin="anonymous"></script>

    <!-- Load Vue followed by BootstrapVue -->
    <script src="//unpkg.com/vue@latest/dist/vue.min.js"></script>
    <script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js"></script>

    <script>
        Vue.component('Timer', {
            template: `
  	                    <div>
                          <div v-show ="statusType !== 'expired'">

                               Time: <span> {{minutes}} : {{ seconds }} </span>

                          </div>

                            <span class="status-tag" :class="statusType">{{ statusText }}</div>
                        </div>
                     `,
            props: ['starttime', 'endtime', 'trans'],
            data: function () {
                return {
                    timer: "",
                    wordString: {},
                    start: "",
                    end: "",
                    interval: "",
                    days: "",
                    minutes: "",
                    hours: "",
                    seconds: "",
                    message: "",
                    statusType: "",
                    statusText: "",

                };
            },
            created: function () {
                this.wordString = JSON.parse(this.trans);
            },
            mounted() {
                this.start = new Date(this.starttime).getTime();
                this.end = new Date(this.endtime).getTime();
                // Update the count down every 1 second
                this.timerCount(this.start, this.end);
                this.interval = setInterval(() => {
                    this.timerCount(this.start, this.end);
                }, 1000);
            },
            methods: {
                timerCount: function (start, end) {
                    // Get todays date and time
                    var now = new Date().getTime();

                    // Find the distance between now an the count down date
                    var distance = start - now;
                    var passTime = end - now;

                    if (distance < 0 && passTime < 0) {


                        this.message = this.wordString.expired;

                        this.statusType = "expired";
                        this.statusText = this.wordString.status.expired;

                        clearInterval(this.interval);

                        this.$emit('expire', "ee");
                        return;

                    } else if (distance < 0 && passTime > 0) {
                        this.calcTime(passTime);
                        this.message = this.wordString.running;
                        this.statusType = "running";
                        this.statusText = this.wordString.status.running;

                    } else if (distance > 0 && passTime > 0) {
                        this.calcTime(distance);
                        this.message = this.wordString.upcoming;
                        this.statusType = "upcoming";
                        this.statusText = this.wordString.status.upcoming;
                    }
                },
                calcTime: function (dist) {
                    // Time calculations for days, hours, minutes and seconds
                    this.days = Math.floor(dist / (1000 * 60 * 60 * 24));
                    this.hours = Math.floor((dist % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    this.minutes = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));
                    this.seconds = Math.floor((dist % (1000 * 60)) / 1000);
                }

            }
        });

        new Vue({
            el: '#app',
            created() {
                this.getTime()



            },

            mounted() {
                this.getAll();
            },
            methods: {
                showModal() {
                    this.$refs['modal-time-out'].show();
                },
                hideModal() {
                    this.$refs['modal-time-out'].hide();
                },
                hideConfirmModal() {
                    var self = this;
                    setTimeout(function () {
                        self.$refs['submit-modal'].hide();
                    }, 100);
                    window.location.href = "/home";
                },
                toggleModal() {
                    // We pass the ID of the button that we want to return focus to
                    // when the modal has hidden
                    this.$refs['modal-time-out'].toggle('#toggle-btn')
                },
                tabNext() {

                    this.tabIndex++;
                    this.qNumber++;
                    this.value += 20;
                },
                tabPrev() {
                    this.tabIndex--;
                    this.value -= 20;
                    this.qNumber--;
                },
                getAll: function () {
                    var self = this;
                    console.log('teste');
                    $.ajax({
                        url: "/quiz/getall",
                        async: false,
                        success: function (response) {
                            console.log(response); //
                            self.questionsVm = response;



                        },
                        error: function () {
                            console.log('error');
                        }
                    });

                },
                submitAnswer()
                {
                    this.$refs['submit-modal'].show();
                },
                timeExpire(msg) {



                    var self = this;
                    self.showModal();
                    setTimeout(function () {
                        self.hideModal();
                        self.submitAnswer();
                    }, 5000)

                },
                getTime() {
                    var self = this;
                    $.ajax({
                        url: "/quiz/gettime",
                        async: false,
                        success: function (response) {

                            self.sTime = response.startTime;
                            self.eTime = response.endDate;
                            console.log(response); //

                        },
                        error: function () {
                            console.log('error');
                        }
                    });
                }

            },
            data: {
                tabIndex: 0,
                value: 20,
                max: 100,
                selected: '',
                questionsVm: [],
                qNumber: 1,

                time: '',
                sTime: "",
                eTime: ""

            }
        })
        Vue.filter('two_digits', function (value) {
            if (value.toString().length <= 1) {
                return "0" + value.toString();
            }
            return value.toString();
        });
    </script>

}
<style>
    .tabContentClass {
        margin-top: 0px;
        background: #fff;
        border: 0px;
    }

    .collapse-navbar {
        display: none !important;
    }
</style>
